#!/usr/bin/env ruby
# monitgen.rb - generate a monitrc file for controlling a mongrel cluster
# usage: monitgen.rb <project> </absolute/path/to/mongrel_cluster.yml>
# e.g. monitgen.rb harvest "/var/www/rails/harvest/current/config/cluster_harvest.yml"
# Copyright (c) 2007 Thomas Nichols - thomas at nexus10 dot com All Rights Reserved
# Distributed under the MIT license : http://opensource.org/licenses/mit-license.php
# TODO: does absolutely *no* input validation - you have been warned...

require 'yaml'
require 'erb'

# ==== monitrc templates ====

header_template = %{
# Mongrel startup script for monit
# Courtesy of Ezra Zygmuntowicz http://www.mail-archive.com/mongrel-users@rubyforge.org/msg03321.html
# *** This file is auto-generated by monitgen.rb -- DO NOT EDIT ***
# 
# Project: <%= project %>
# YAML:    <%= cluster_yaml %>
# Servers: <%= servers %>
# Port:    <%= baseport %>


}

# ================

body_template = %{
check process mongrel_harvest_<%= port %>
   with pidfile /var/run/mongrel_cluster/mongrel_harvest.<%= port %>.pid
   start program = "/usr/bin/mongrel_rails cluster::start --only <%= port %> --clean -C <%= cluster_yaml %>"
   stop program = "/usr/bin/mongrel_rails cluster::stop --only <%= port %> --clean -C <%= cluster_yaml %>"
   if totalmem is greater than 110.0 MB for 4 cycles then  
restart       # eating up memory?
   if cpu is greater than 50% for 2 cycles then  
alert                  # send an email to admin
   if cpu is greater than 80% for 3 cycles then  
restart                # hung process?
   if loadavg(5min) greater than 10 for 8 cycles then  
restart          # bad, bad, bad
   if 20 restarts within 20 cycles then  
timeout                         # something is wrong, call the sys-admin
   if failed port <%= port %> protocol http                   # check for response
        with timeout 10 seconds
        for 2 cycles
        then restart
   group mongrel

}

# ==== end templates ====

project = ARGV[0]
cluster_yaml = ARGV[1]
config = YAML.load_file cluster_yaml 
servers = config["servers"] || 0
baseport = config["port"].to_i || 7000

header_erb = ERB.new(header_template)
header_erb.run(binding)

servers.to_i.times do |i|
  port = baseport + i
  body_erb = ERB.new(body_template)
  body_erb.run(binding)
end

